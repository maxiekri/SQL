"Project: Data dig"
We’ve curated a set of interesting data sets for you: Top movies, Top countries by population, Solar system objects by size, Marvel characters, Furniture store sales, Earned KA badges, Winston's donut logs, Card game results, and NFL draft picks.

Pick one of those data sets or create a data set like that, and use advanced SELECT queries to discover things about the data. What sort of questions might one have about that data, like if they were using it for an app or a business idea? Here are some ideas:

What are average, max, and min values in the data?
What about those numbers per category in the data (using HAVING)?
What ways are there to group the data values that don’t exist yet (using CASE)?
What interesting ways are there to filter the data (using AND/OR)?

Project: Data dig - Marvel characters

CREATE TABLE marvels (ID INTEGER PRIMARY KEY,
name TEXT,
popularity INTEGER,
alignment TEXT,
gender TEXT,
height_m NUMERIC,
weight_kg NUMERIC,
hometown TEXT,
intelligence INTEGER,
strength INTEGER,
speed INTEGER,
durability INTEGER,
energy_Projection INTEGER,
fighting_Skills INTEGER);

INSERT INTO marvels VALUES(1, "Spider Man", 1, "Good", "Male", 1.78, 75.75, "USA", 4, 4, 3, 3, 1, 4);
INSERT INTO marvels VALUES(2, "Iron Man", 20, "Neutral", "Male", 1.98, 102.58, "USA", 6, 6, 5, 6, 6, 4);
INSERT INTO marvels VALUES(3, "Hulk", 18, "Neutral", "Male", 2.44, 635.29, "USA", 6, 7, 3, 7, 5, 4);
INSERT INTO marvels VALUES(4, "Wolverine", 3, "Good", "Male", 1.6, 88.46, "Canada", 2, 4, 2, 4, 1, 7);
INSERT INTO marvels VALUES(5, "Thor", 5, "Good", "Male", 1.98, 290.3, "Norway", 2, 7, 7, 6, 6, 4);
INSERT INTO marvels VALUES(6, "Green Goblin", 91, "Bad", "Male", 1.93, 174.63, "USA", 4, 4, 3, 4, 3, 3);
INSERT INTO marvels VALUES(7, "Magneto", 11, "Neutral", "Male", 1.88, 86.18, "Germany", 6, 3, 5, 4, 6, 4);
INSERT INTO marvels VALUES(8, "Thanos", 47, "Bad", "Male", 2.01, 446.79, "Titan", 6, 7, 7, 6, 6, 4);
INSERT INTO marvels VALUES(9, "Loki", 32, "Bad", "Male", 1.93, 238.14, "Jotunheim", 5, 5, 7, 6, 6, 3);
INSERT INTO marvels VALUES(10, "Doctor Doom", 19, "Bad", "Male", 2.01, 188.24, "Latveria", 6, 4, 5, 6, 6, 4);
INSERT INTO marvels VALUES(11, "Jean Greay", 8, "Good", "Female", 1.68, 52.16, "USA", 3, 2, 7, 7, 7, 4);
INSERT INTO marvels VALUES(12, "Rogue", 4, "Good", "Female", 1.73, 54.43, "USA", 7, 7, 7, 7, 7, 7);

SELECT * FROM marvels ORDER BY popularity ASC;

SELECT MIN(popularity) AS "MAX(popularity)", AVG(popularity), MAX(popularity) AS "MIN(popularity)" FROM marvels;

SELECT name, AVG(popularity) AS more_than_avg_popularity FROM marvels
GROUP BY name
HAVING more_than_avg_popularity < 21
ORDER BY more_than_avg_popularity;

SELECT alignment, COUNT() FROM marvels
GROUP BY alignment ORDER BY COUNT() DESC;

/* Who is the tallest among good heroes? */
SELECT * FROM marvels WHERE alignment IN ("Good") ORDER BY height_m DESC;

/* Who is neutral hero from USA? */
SELECT name AS "Neutral heroes from USA" FROM marvels
WHERE alignment IN ("Neutral")
AND hometown IN ("USA");

SELECT gender, COUNT(*) FROM marvels
GROUP BY gender;

SELECT name, AVG(popularity) AS avg_popularity FROM marvels
GROUP BY name
HAVING avg_popularity < 21
ORDER BY avg_popularity;

SELECT MAX(height_m), AVG(height_m), MIN(height_m) FROM marvels;

SELECT MAX(height_m) AS "MAX height for Villains", MIN(height_m) AS "MIN height for Villains" FROM marvels
WHERE alignment IN ("Bad");

SELECT MAX(weight_kg), AVG(weight_kg), MIN(weight_kg) FROM marvels;

SELECT MAX(weight_kg) AS "MAX weight for Villains", MIN(weight_kg) AS "MIN weight for Villains" FROM marvels
WHERE alignment IN ("Bad");

/* Who is more than average in height and weight? */
SELECT * FROM marvels WHERE height_m > 192 OR weight_kg > 203;

SELECT hometown, COUNT() FROM marvels
GROUP BY hometown ORDER BY COUNT() DESC;

SELECT hometown AS top_hometown, COUNT(*) as total_heroes FROM marvels
GROUP BY hometown
HAVING total_heroes > 1;

SELECT MAX(hometown) FROM marvels;

SELECT name, SUM(intelligence + strength + speed + durability + energy_Projection + fighting_Skills) AS total_score FROM marvels
GROUP BY name
ORDER BY total_score DESC;

SELECT name, SUM(intelligence + strength + speed + durability + energy_Projection + fighting_Skills) AS best_total_score FROM marvels
GROUP BY name
HAVING intelligence >= 6
AND strength >= 5
OR energy_Projection >=7
OR fighting_Skills = 7
ORDER BY best_total_score DESC;

/* Who will win the fight? */
SELECT alignment AS "Avangers vs Villains", SUM(intelligence + strength + speed + durability + energy_Projection + fighting_Skills) AS total_score FROM marvels
GROUP BY alignment
HAVING total_score >= 100
ORDER BY total_score DESC;

/* Force calculatin in newton [N] "F=m*a" /
SELECT name, SUM(weight_kg * height_m / (speedspeed)) AS "Force_newton_[N]" FROM marvels
GROUP BY name
ORDER BY "Force_newton_[N]" DESC;

/* CASE */
SELECT name, popularity, intelligence,
CASE
WHEN popularity < 10 THEN "top list"
WHEN popularity <= 20 AND intelligence >= 6 THEN "great potential"
WHEN popularity < 50 AND intelligence <= 6 THEN "low potential"
ELSE "below target"
END as "potential"
FROM marvels
ORDER BY potential DESC;

SELECT COUNT(),
CASE
WHEN popularity < 10 THEN "top list"
WHEN popularity <= 20 AND intelligence >= 6 THEN "great potential"
WHEN popularity < 50 AND intelligence <= 6 THEN "low potential"
ELSE "below target"
END as "potential"
FROM marvels
GROUP BY potential
ORDER BY COUNT() DESC;
